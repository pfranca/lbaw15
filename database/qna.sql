DROP TABLE IF EXISTS topicTag CASCADE;
DROP TABLE IF EXISTS questionTag CASCADE;
DROP TABLE IF EXISTS tag CASCADE;
DROP TABLE IF EXISTS notificationFollow CASCADE;
DROP TABLE IF EXISTS notificationAnswer CASCADE;
DROP TABLE IF EXISTS vote CASCADE;
DROP TABLE IF EXISTS followQuestion CASCADE;
DROP TABLE IF EXISTS followTopic CASCADE;
DROP TABLE IF EXISTS reportAnswer CASCADE;
DROP TABLE IF EXISTS reportQuestion CASCADE;
DROP TABLE IF EXISTS answer CASCADE;
DROP TABLE IF EXISTS question CASCADE;
DROP TABLE IF EXISTS topic CASCADE;
DROP TABLE IF EXISTS "user" CASCADE;

CREATE TYPE user_type AS ENUM ('NORMAL', 'MOD', 'ADMIN');

CREATE TABLE "user"(
  id SERIAL UNIQUE,
  username VARCHAR(30) NOT NULL UNIQUE,
  email TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  img TEXT NOT NULL,
  bio TEXT,
  disable BOOLEAN DEFAULT FALSE NOT NULL,
  type user_type NOT NULL
);

CREATE TABLE topic(
  id SERIAL UNIQUE,
  name VARCHAR(30) NOT NULL UNIQUE,
  img TEXT NOT NULL,
  disable BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE question(
  id SERIAL UNIQUE,
  "date" TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  karma INTEGER DEFAULT 0 NOT NULL,
  short_message TEXT NOT NULL,
  long_message TEXT ,
  id_author INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
  id_topic INTEGER NOT NULL REFERENCES topic(id) ON UPDATE CASCADE,
  disable BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE answer(
  id SERIAL UNIQUE,
  "date" TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  karma INTEGER DEFAULT 0 NOT NULL,
  message TEXT NOT NULL,
  id_author INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
  id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
  disable BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE reportQuestion(
  id SERIAL UNIQUE,
  reason TEXT NOT NULL,
  id_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
  id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE
);

CREATE TABLE reportAnswer(
  id SERIAL UNIQUE,
  reason TEXT NOT NULL,
  id_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
  id_answer INTEGER NOT NULL REFERENCES answer(id) ON UPDATE CASCADE
);

CREATE TABLE followTopic(
  id_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
  id_topic INTEGER NOT NULL REFERENCES topic(id) ON UPDATE CASCADE,
  PRIMARY KEY(id_user, id_topic)
);

CREATE TABLE followQuestion(
 id_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
 id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
  PRIMARY KEY(id_user, id_question)
);

CREATE TABLE vote(
    id SERIAL UNIQUE,
    id_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
    vote BOOLEAN NOT NULL,
    id_answer INTEGER NOT NULL REFERENCES answer(id) ON UPDATE CASCADE,
    id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
    CONSTRAINT "only one" CHECK ((((id_answer IS NULL) AND (id_question IS NOT NULL)) OR ((id_answer IS NOT NULL) AND (id_question IS NULL))))
);

CREATE TABLE notificationAnswer(
    id SERIAL UNIQUE,
    notificated_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
    id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
    message TEXT  NOT NULL,
    seen BOOLEAN DEFAULT FALSE NOT NULL, 
    "date" TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

CREATE TABLE notificationFollow(
    id SERIAL UNIQUE,
  	notificated_user INTEGER NOT NULL REFERENCES "user"(id) ON UPDATE CASCADE,
    id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
    message TEXT NOT NULL,
    seen BOOLEAN DEFAULT FALSE NOT NULL, 
    "date" TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

CREATE TABLE tag(
    id SERIAL UNIQUE,
    tagName VARCHAR(20) NOT NULL
);

CREATE TABLE questionTag(
  id_question INTEGER NOT NULL REFERENCES question(id) ON UPDATE CASCADE,
  id_tag INTEGER NOT NULL REFERENCES tag(id) ON UPDATE CASCADE,
  PRIMARY KEY(id_question, id_tag)
);

CREATE TABLE topicTag(
  id_topic INTEGER NOT NULL REFERENCES topic(id) ON UPDATE CASCADE,
 id_tag INTEGER NOT NULL REFERENCES tag(id) ON UPDATE CASCADE,
  PRIMARY KEY(id_topic, id_tag)
);
